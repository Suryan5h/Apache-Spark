=~=~=~=~=~=~=~=~=~=~=~= PuTTY log 2022.08.03 19:45:13 =~=~=~=~=~=~=~=~=~=~=~=
login as: ec20 -user
Authenticating with public key "try_pig"
Last login: Wed Aug  3 05:56:56 2022 from 49.37.171.187

       __|  __|_  )
       _|  (     /   Amazon Linux 2 AMI
      ___|\___|___|

https://aws.amazon.com/amazon-linux-2/
]0;ec2-user@ip-172-31-92-186:~[?1034h[ec2-user@ip-172-31-92-186 ~]$ pyspark
Python 2.7.18 (default, May 25 2022, 14:30:51) 
[GCC 7.3.1 20180712 (Red Hat 7.3.1-15)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
22/08/03 14:15:31 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
Using Spark's default log4j profile: org/apache/spark/log4j-defaults.properties
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
[?1034hWelcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /__ / .__/\_,_/_/ /_/\_\   version 2.4.4
      /_/

Using Python version 2.7.18 (default, May 25 2022 14:30:51)
SparkSession available as 'spark'.
>>> [K>>> [K>>> [K>>> [K>>> rdd = sc.parallelize()[)])(])'])a])b])c])']),])1])2])[C)]),])(]))])[C')])d)])e)])f)])')]),)])1)])5)])[C[C[C
>>> rrdd.[K[K[K[Kdd.collect()
[Stage 0:>                                                          (0 + 1) / 1]                                                                                [('abc', 12), ('def', 15)]
>>> rdd2 = rdd.map()l)a)m)b)d)a) )x):)x).)v)a)l)u)e)s)()[C)[C
>>> rdd2.collect()
22/08/03 14:18:16 ERROR Executor: Exception in task 0.0 in stage 1.0 (TID 1)
org.apache.spark.api.python.PythonException: Traceback (most recent call last):
  File "/home/ec2-user/spark-2.4.4-bin-hadoop2.7/python/lib/pyspark.zip/pyspark/worker.py", line 377, in main
    process()
  File "/home/ec2-user/spark-2.4.4-bin-hadoop2.7/python/lib/pyspark.zip/pyspark/worker.py", line 372, in process
    serializer.dump_stream(func(split_index, iterator), outfile)
  File "/home/ec2-user/spark-2.4.4-bin-hadoop2.7/python/lib/pyspark.zip/pyspark/serializers.py", line 393, in dump_stream
    vs = list(itertools.islice(iterator, batch))
  File "/home/ec2-user/spark-2.4.4-bin-hadoop2.7/python/lib/pyspark.zip/pyspark/util.py", line 99, in wrapper
    return f(*args, **kwargs)
  File "<stdin>", line 1, in <lambda>
AttributeError: 'tuple' object has no attribute 'values'

	at org.apache.spark.api.python.BasePythonRunner$ReaderIterator.handlePythonException(PythonRunner.scala:456)
	at org.apache.spark.api.python.PythonRunner$$anon$1.read(PythonRunner.scala:592)
	at org.apache.spark.api.python.PythonRunner$$anon$1.read(PythonRunner.scala:575)
	at org.apache.spark.api.python.BasePythonRunner$ReaderIterator.hasNext(PythonRunner.scala:410)
	at org.apache.spark.InterruptibleIterator.hasNext(InterruptibleIterator.scala:37)
	at scala.collection.Iterator$class.foreach(Iterator.scala:891)
	at org.apache.spark.InterruptibleIterator.foreach(InterruptibleIterator.scala:28)
	at scala.collection.generic.Growable$class.$plus$plus$eq(Growable.scala:59)
	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:104)
	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:48)
	at scala.collection.TraversableOnce$class.to(TraversableOnce.scala:310)
	at org.apache.spark.InterruptibleIterator.to(InterruptibleIterator.scala:28)
	at scala.collection.TraversableOnce$class.toBuffer(TraversableOnce.scala:302)
	at org.apache.spark.InterruptibleIterator.toBuffer(InterruptibleIterator.scala:28)
	at scala.collection.TraversableOnce$class.toArray(TraversableOnce.scala:289)
	at org.apache.spark.InterruptibleIterator.toArray(InterruptibleIterator.scala:28)
	at org.apache.spark.rdd.RDD$$anonfun$collect$1$$anonfun$13.apply(RDD.scala:945)
	at org.apache.spark.rdd.RDD$$anonfun$collect$1$$anonfun$13.apply(RDD.scala:945)
	at org.apache.spark.SparkContext$$anonfun$runJob$5.apply(SparkContext.scala:2101)
	at org.apache.spark.SparkContext$$anonfun$runJob$5.apply(SparkContext.scala:2101)
	at org.apache.spark.scheduler.ResultTask.runTask(ResultTask.scala:90)
	at org.apache.spark.scheduler.Task.run(Task.scala:123)
	at org.apache.spark.executor.Executor$TaskRunner$$anonfun$10.apply(Executor.scala:408)
	at org.apache.spark.util.Utils$.tryWithSafeFinally(Utils.scala:1360)
	at org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:414)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
22/08/03 14:18:16 WARN TaskSetManager: Lost task 0.0 in stage 1.0 (TID 1, localhost, executor driver): org.apache.spark.api.python.PythonException: Traceback (most recent call last):
  File "/home/ec2-user/spark-2.4.4-bin-hadoop2.7/python/lib/pyspark.zip/pyspark/worker.py", line 377, in main
    process()
  File "/home/ec2-user/spark-2.4.4-bin-hadoop2.7/python/lib/pyspark.zip/pyspark/worker.py", line 372, in process
    serializer.dump_stream(func(split_index, iterator), outfile)
  File "/home/ec2-user/spark-2.4.4-bin-hadoop2.7/python/lib/pyspark.zip/pyspark/serializers.py", line 393, in dump_stream
    vs = list(itertools.islice(iterator, batch))
  File "/home/ec2-user/spark-2.4.4-bin-hadoop2.7/python/lib/pyspark.zip/pyspark/util.py", line 99, in wrapper
    return f(*args, **kwargs)
  File "<stdin>", line 1, in <lambda>
AttributeError: 'tuple' object has no attribute 'values'

	at org.apache.spark.api.python.BasePythonRunner$ReaderIterator.handlePythonException(PythonRunner.scala:456)
	at org.apache.spark.api.python.PythonRunner$$anon$1.read(PythonRunner.scala:592)
	at org.apache.spark.api.python.PythonRunner$$anon$1.read(PythonRunner.scala:575)
	at org.apache.spark.api.python.BasePythonRunner$ReaderIterator.hasNext(PythonRunner.scala:410)
	at org.apache.spark.InterruptibleIterator.hasNext(InterruptibleIterator.scala:37)
	at scala.collection.Iterator$class.foreach(Iterator.scala:891)
	at org.apache.spark.InterruptibleIterator.foreach(InterruptibleIterator.scala:28)
	at scala.collection.generic.Growable$class.$plus$plus$eq(Growable.scala:59)
	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:104)
	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:48)
	at scala.collection.TraversableOnce$class.to(TraversableOnce.scala:310)
	at org.apache.spark.InterruptibleIterator.to(InterruptibleIterator.scala:28)
	at scala.collection.TraversableOnce$class.toBuffer(TraversableOnce.scala:302)
	at org.apache.spark.InterruptibleIterator.toBuffer(InterruptibleIterator.scala:28)
	at scala.collection.TraversableOnce$class.toArray(TraversableOnce.scala:289)
	at org.apache.spark.InterruptibleIterator.toArray(InterruptibleIterator.scala:28)
	at org.apache.spark.rdd.RDD$$anonfun$collect$1$$anonfun$13.apply(RDD.scala:945)
	at org.apache.spark.rdd.RDD$$anonfun$collect$1$$anonfun$13.apply(RDD.scala:945)
	at org.apache.spark.SparkContext$$anonfun$runJob$5.apply(SparkContext.scala:2101)
	at org.apache.spark.SparkContext$$anonfun$runJob$5.apply(SparkContext.scala:2101)
	at org.apache.spark.scheduler.ResultTask.runTask(ResultTask.scala:90)
	at org.apache.spark.scheduler.Task.run(Task.scala:123)
	at org.apache.spark.executor.Executor$TaskRunner$$anonfun$10.apply(Executor.scala:408)
	at org.apache.spark.util.Utils$.tryWithSafeFinally(Utils.scala:1360)
	at org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:414)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

22/08/03 14:18:16 ERROR TaskSetManager: Task 0 in stage 1.0 failed 1 times; aborting job
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/ec2-user/spark-2.4.4-bin-hadoop2.7/python/pyspark/rdd.py", line 816, in collect
    sock_info = self.ctx._jvm.PythonRDD.collectAndServe(self._jrdd.rdd())
  File "/home/ec2-user/spark-2.4.4-bin-hadoop2.7/python/lib/py4j-0.10.7-src.zip/py4j/java_gateway.py", line 1257, in __call__
  File "/home/ec2-user/spark-2.4.4-bin-hadoop2.7/python/pyspark/sql/utils.py", line 63, in deco
    return f(*a, **kw)
  File "/home/ec2-user/spark-2.4.4-bin-hadoop2.7/python/lib/py4j-0.10.7-src.zip/py4j/protocol.py", line 328, in get_return_value
py4j.protocol.Py4JJavaError: An error occurred while calling z:org.apache.spark.api.python.PythonRDD.collectAndServe.
: org.apache.spark.SparkException: Job aborted due to stage failure: Task 0 in stage 1.0 failed 1 times, most recent failure: Lost task 0.0 in stage 1.0 (TID 1, localhost, executor driver): org.apache.spark.api.python.PythonException: Traceback (most recent call last):
  File "/home/ec2-user/spark-2.4.4-bin-hadoop2.7/python/lib/pyspark.zip/pyspark/worker.py", line 377, in main
    process()
  File "/home/ec2-user/spark-2.4.4-bin-hadoop2.7/python/lib/pyspark.zip/pyspark/worker.py", line 372, in process
    serializer.dump_stream(func(split_index, iterator), outfile)
  File "/home/ec2-user/spark-2.4.4-bin-hadoop2.7/python/lib/pyspark.zip/pyspark/serializers.py", line 393, in dump_stream
    vs = list(itertools.islice(iterator, batch))
  File "/home/ec2-user/spark-2.4.4-bin-hadoop2.7/python/lib/pyspark.zip/pyspark/util.py", line 99, in wrapper
    return f(*args, **kwargs)
  File "<stdin>", line 1, in <lambda>
AttributeError: 'tuple' object has no attribute 'values'

	at org.apache.spark.api.python.BasePythonRunner$ReaderIterator.handlePythonException(PythonRunner.scala:456)
	at org.apache.spark.api.python.PythonRunner$$anon$1.read(PythonRunner.scala:592)
	at org.apache.spark.api.python.PythonRunner$$anon$1.read(PythonRunner.scala:575)
	at org.apache.spark.api.python.BasePythonRunner$ReaderIterator.hasNext(PythonRunner.scala:410)
	at org.apache.spark.InterruptibleIterator.hasNext(InterruptibleIterator.scala:37)
	at scala.collection.Iterator$class.foreach(Iterator.scala:891)
	at org.apache.spark.InterruptibleIterator.foreach(InterruptibleIterator.scala:28)
	at scala.collection.generic.Growable$class.$plus$plus$eq(Growable.scala:59)
	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:104)
	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:48)
	at scala.collection.TraversableOnce$class.to(TraversableOnce.scala:310)
	at org.apache.spark.InterruptibleIterator.to(InterruptibleIterator.scala:28)
	at scala.collection.TraversableOnce$class.toBuffer(TraversableOnce.scala:302)
	at org.apache.spark.InterruptibleIterator.toBuffer(InterruptibleIterator.scala:28)
	at scala.collection.TraversableOnce$class.toArray(TraversableOnce.scala:289)
	at org.apache.spark.InterruptibleIterator.toArray(InterruptibleIterator.scala:28)
	at org.apache.spark.rdd.RDD$$anonfun$collect$1$$anonfun$13.apply(RDD.scala:945)
	at org.apache.spark.rdd.RDD$$anonfun$collect$1$$anonfun$13.apply(RDD.scala:945)
	at org.apache.spark.SparkContext$$anonfun$runJob$5.apply(SparkContext.scala:2101)
	at org.apache.spark.SparkContext$$anonfun$runJob$5.apply(SparkContext.scala:2101)
	at org.apache.spark.scheduler.ResultTask.runTask(ResultTask.scala:90)
	at org.apache.spark.scheduler.Task.run(Task.scala:123)
	at org.apache.spark.executor.Executor$TaskRunner$$anonfun$10.apply(Executor.scala:408)
	at org.apache.spark.util.Utils$.tryWithSafeFinally(Utils.scala:1360)
	at org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:414)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Driver stacktrace:
	at org.apache.spark.scheduler.DAGScheduler.org$apache$spark$scheduler$DAGScheduler$$failJobAndIndependentStages(DAGScheduler.scala:1889)
	at org.apache.spark.scheduler.DAGScheduler$$anonfun$abortStage$1.apply(DAGScheduler.scala:1877)
	at org.apache.spark.scheduler.DAGScheduler$$anonfun$abortStage$1.apply(DAGScheduler.scala:1876)
	at scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59)
	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:48)
	at org.apache.spark.scheduler.DAGScheduler.abortStage(DAGScheduler.scala:1876)
	at org.apache.spark.scheduler.DAGScheduler$$anonfun$handleTaskSetFailed$1.apply(DAGScheduler.scala:926)
	at org.apache.spark.scheduler.DAGScheduler$$anonfun$handleTaskSetFailed$1.apply(DAGScheduler.scala:926)
	at scala.Option.foreach(Option.scala:257)
	at org.apache.spark.scheduler.DAGScheduler.handleTaskSetFailed(DAGScheduler.scala:926)
	at org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.doOnReceive(DAGScheduler.scala:2110)
	at org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.onReceive(DAGScheduler.scala:2059)
	at org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.onReceive(DAGScheduler.scala:2048)
	at org.apache.spark.util.EventLoop$$anon$1.run(EventLoop.scala:49)
	at org.apache.spark.scheduler.DAGScheduler.runJob(DAGScheduler.scala:737)
	at org.apache.spark.SparkContext.runJob(SparkContext.scala:2061)
	at org.apache.spark.SparkContext.runJob(SparkContext.scala:2082)
	at org.apache.spark.SparkContext.runJob(SparkContext.scala:2101)
	at org.apache.spark.SparkContext.runJob(SparkContext.scala:2126)
	at org.apache.spark.rdd.RDD$$anonfun$collect$1.apply(RDD.scala:945)
	at org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:151)
	at org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:112)
	at org.apache.spark.rdd.RDD.withScope(RDD.scala:363)
	at org.apache.spark.rdd.RDD.collect(RDD.scala:944)
	at org.apache.spark.api.python.PythonRDD$.collectAndServe(PythonRDD.scala:166)
	at org.apache.spark.api.python.PythonRDD.collectAndServe(PythonRDD.scala)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at py4j.reflection.MethodInvoker.invoke(MethodInvoker.java:244)
	at py4j.reflection.ReflectionEngine.invoke(ReflectionEngine.java:357)
	at py4j.Gateway.invoke(Gateway.java:282)
	at py4j.commands.AbstractCommand.invokeMethod(AbstractCommand.java:132)
	at py4j.commands.CallCommand.execute(CallCommand.java:79)
	at py4j.GatewayConnection.run(GatewayConnection.java:238)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.apache.spark.api.python.PythonException: Traceback (most recent call last):
  File "/home/ec2-user/spark-2.4.4-bin-hadoop2.7/python/lib/pyspark.zip/pyspark/worker.py", line 377, in main
    process()
  File "/home/ec2-user/spark-2.4.4-bin-hadoop2.7/python/lib/pyspark.zip/pyspark/worker.py", line 372, in process
    serializer.dump_stream(func(split_index, iterator), outfile)
  File "/home/ec2-user/spark-2.4.4-bin-hadoop2.7/python/lib/pyspark.zip/pyspark/serializers.py", line 393, in dump_stream
    vs = list(itertools.islice(iterator, batch))
  File "/home/ec2-user/spark-2.4.4-bin-hadoop2.7/python/lib/pyspark.zip/pyspark/util.py", line 99, in wrapper
    return f(*args, **kwargs)
  File "<stdin>", line 1, in <lambda>
AttributeError: 'tuple' object has no attribute 'values'

	at org.apache.spark.api.python.BasePythonRunner$ReaderIterator.handlePythonException(PythonRunner.scala:456)
	at org.apache.spark.api.python.PythonRunner$$anon$1.read(PythonRunner.scala:592)
	at org.apache.spark.api.python.PythonRunner$$anon$1.read(PythonRunner.scala:575)
	at org.apache.spark.api.python.BasePythonRunner$ReaderIterator.hasNext(PythonRunner.scala:410)
	at org.apache.spark.InterruptibleIterator.hasNext(InterruptibleIterator.scala:37)
	at scala.collection.Iterator$class.foreach(Iterator.scala:891)
	at org.apache.spark.InterruptibleIterator.foreach(InterruptibleIterator.scala:28)
	at scala.collection.generic.Growable$class.$plus$plus$eq(Growable.scala:59)
	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:104)
	at scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:48)
	at scala.collection.TraversableOnce$class.to(TraversableOnce.scala:310)
	at org.apache.spark.InterruptibleIterator.to(InterruptibleIterator.scala:28)
	at scala.collection.TraversableOnce$class.toBuffer(TraversableOnce.scala:302)
	at org.apache.spark.InterruptibleIterator.toBuffer(InterruptibleIterator.scala:28)
	at scala.collection.TraversableOnce$class.toArray(TraversableOnce.scala:289)
	at org.apache.spark.InterruptibleIterator.toArray(InterruptibleIterator.scala:28)
	at org.apache.spark.rdd.RDD$$anonfun$collect$1$$anonfun$13.apply(RDD.scala:945)
	at org.apache.spark.rdd.RDD$$anonfun$collect$1$$anonfun$13.apply(RDD.scala:945)
	at org.apache.spark.SparkContext$$anonfun$runJob$5.apply(SparkContext.scala:2101)
	at org.apache.spark.SparkContext$$anonfun$runJob$5.apply(SparkContext.scala:2101)
	at org.apache.spark.scheduler.ResultTask.runTask(ResultTask.scala:90)
	at org.apache.spark.scheduler.Task.run(Task.scala:123)
	at org.apache.spark.executor.Executor$TaskRunner$$anonfun$10.apply(Executor.scala:408)
	at org.apache.spark.util.Utils$.tryWithSafeFinally(Utils.scala:1360)
	at org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:414)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	... 1 more

>>> rdd2.collect()[C[C[C[C[C[C[C[C = rdd.map(lambda x:x.values())[C[K[1P)[1P)[1P)[1P)[1P)[1P)[1P)[1P)[)1)])[C
>>> rdd2.colelct()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'PipelinedRDD' object has no attribute 'colelct'
>>> rdd2.collect()
[12, 15]
>>> rdd.colelct()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'RDD' object has no attribute 'colelct'
>>> rdd.glom().collect()
[[('abc', 12), ('def', 15)]]
>>> rdd2[K3 = rdd.map(lambda x:x[0]).c[K[K
>>> rdd3.colelct()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'PipelinedRDD' object has no attribute 'colelct'
>>> rdd3.collect()
['abc', 'def']
>>> rdd3.collect()elct()[C[C[C[C[C[C[C[C = rdd.map(lambda x:x[0])[1P])1])[C[C
>>> rdd3 = rdd.map(lambda x:x[1])[C[C[C[C[C[C[C[C[15P.collect()
[12, 15]
>>> =~=~=~=~=~=~=~=~=~=~=~= PuTTY log 2022.08.03 19:56:02 =~=~=~=~=~=~=~=~=~=~=~=
login as: c2  ec2-user
Authenticating with public key "try_pig"
Last login: Wed Aug  3 14:15:20 2022 from 49.37.171.187

       __|  __|_  )
       _|  (     /   Amazon Linux 2 AMI
      ___|\___|___|

https://aws.amazon.com/amazon-linux-2/
]0;ec2-user@ip-172-31-92-186:~[?1034h[ec2-user@ip-172-31-92-186 ~]$ pysparkls[Kpyspark
Python 2.7.18 (default, May 25 2022, 14:30:51) 
[GCC 7.3.1 20180712 (Red Hat 7.3.1-15)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
22/08/03 14:26:21 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
Using Spark's default log4j profile: org/apache/spark/log4j-defaults.properties
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
[?1034hWelcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /__ / .__/\_,_/_/ /_/\_\   version 2.4.4
      /_/

Using Python version 2.7.18 (default, May 25 2022 14:30:51)
SparkSession available as 'spark'.
>>> lines.[K = sc.paralli[Kelize([[K)[)])(]))])')])a)])')]),)])')])b)])')])[C,])(]))])')])a)])')]),)])')])c)])')])[C,])(]))])')])a)])')]),)])')])e)])')])[C,])(]))])')])b)])')])[1P)])[1P)])c)])')]),)])')])f)])')])[C,])(]))])')])d)])')]),)])')])b)])')])[C,])(]))])')])d)])')]),)])')])e)])')])[C,])(]))])')]) [A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Ce)]))[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C')])[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C,)])')])[Cd)])')]),)])')])e)])[1P)])[1P)])[1P)])[C,])(]))])')])e)])')]),)])')])f)])')])[C,])(]))])')])f)])')]),)])')])a)])')])[C[C[C
>>> lines.collect()
[('a', 'b'), ('a', 'c'), ('a', 'e'), ('c', 'f'), ('d', 'b'), ('d', 'e'), ('e', 'd'), ('e', 'f'), ('f', 'a')]
>>> links = links[K[K[K[K[K[K[K[K[K[Kks = lines.groupByKey()
>>> links.collect()
[Stage 1:>                                                          (0 + 1) / 1]                                                                                [('a', <pyspark.resultiterable.ResultIterable object at 0x7f10632c4b10>), ('c', <pyspark.resultiterable.ResultIterable object at 0x7f10632c4d90>), ('e', <pyspark.resultiterable.ResultIterable object at 0x7f10632c4d50>), ('d', <pyspark.resultiterable.ResultIterable object at 0x7f10632c4e10>), ('f', <pyspark.resultiterable.ResultIterable object at 0x7f10632c4dd0>)]
>>> ranks = links.distinct[K[K[K[K[K[K[K[Kmap()l)a)m)b)d)a) )x):)()x)[)0)]),)1)[C)
>>> links.take(1)
[('a', <pyspark.resultiterable.ResultIterable object at 0x7f10632c41d0>)]
>>> links.ake[K[K[Ktake(5)
[('a', <pyspark.resultiterable.ResultIterable object at 0x7f1063302450>), ('c', <pyspark.resultiterable.ResultIterable object at 0x7f1063302810>), ('e', <pyspark.resultiterable.ResultIterable object at 0x7f10633028d0>), ('d', <pyspark.resultiterable.ResultIterable object at 0x7f10632db110>), ('f', <pyspark.resultiterable.ResultIterable object at 0x7f10632db090>)]
>>> ranks.collect()
[('a', 1), ('c', 1), ('e', 1), ('d', 1), ('f', 1)]
>>> ranks.collect()[C[C[C[C[2Plinks.take(5)1)[C[C[C[Cranks = links.map(lambda x:(x[0],1))[1@d[1@i[1@s[1@t[1@i[1@n[1@c[1@t[1@.[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[1@([1@)[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C
>>> ranks.collect()
[('e', 1), ('d', 1), ('c', 1), ('f', 1), ('a', 1)]
>>> def nodecontributions(nodes,rank):
...     number = len(nodes)
...     for node in nodes:
...             yield(node,rank*1.0/number)def nodecontributions(nodes,rank):
  File "<stdin>", line 4
    yield(node,rank*1.0/number)def nodecontributions(nodes,rank):
                                 ^
SyntaxError: invalid syntax
>>>     number = len(nodes)
  File "<stdin>", line 1
    number = len(nodes)
    ^
IndentationError: unexpected indent
>>>     for node in nodes:
  File "<stdin>", line 1
    for node in nodes:
    ^
IndentationError: unexpected indent
>>>             yield(node,rank*1.0/number)[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[Kdef nodecontributions(nodes,rank):
...     number = len(nodes)
...     for node in nodes:
...             yield(node,rank*1.0/number)
... 
>>> for i in range(1)[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[Kfor i in range(1):
...        contributions = links.join(ranks).flatMap(lambda x: nodecontributions(x[1][0], x[1 ][1]))
...        ranks = contributions.reduceByKey(lambda x, y: x+y).mapValues(lambda x: 0.85 * x +  0.15)
... 
>>> ranks.collect()
[('a', 1.0), ('c', 0.43333333333333335), ('e', 0.8583333333333333), ('b', 0.8583333333333333), ('d', 0.575), ('f', 1.4249999999999998)]
>>> ranks.collect()[C[C[C[C       ranks = contributions.reduceByKey(lambda x, y: x+y).mapValues(lambda x: 0.85 * x +  0.15)[A[C[C[C[C[Ccontributions = links.join(ranks).flatMap(lambda x: nodecontributions(x[1][0], x[1][1]))[Afor i in range(1):[K
[K[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C            yield(node,rank*1.0/number)[C[C[C[C[C[C[C[C[17Pfor node in nodes:[C[C[C[C[C[C[C[Cnumber = len(nodes)[C[C[C[Cdef nodecontributions(nodes,rank):[C[C[C[C[12P    for node in nodes:[C[C[C[C[C[C[C[Cnumber = len(nodes)[C[C[C[C[C[C[C[C        yield(node,rank*1.0/number)def nodecontributions(nodes,rank):[C[C[C[C[C[C[C[Cfor node in nodes:[K[C[C[C[C[C[C[C[Cnumber = len(nodes)[C[C[C[Cdef nodecontributions(nodes,rank):[C[C[C[C[19Pranks.collect() = links.distinct().map(lambda x:(x[0],1))/))6))[C[C
>>> for i in range(1):
...        contributions = links.join(ranks).flatMap(lambda x: nodecontributions(x[1][0], x[1 ][1]))
...        ranks = contributions.reduceByKey(lambda x, y: x+y).mapValues(lambda x: 0.85 * x +  0.15)
... 
>>> ranks.collect()
[('a', 0.15), ('c', 0.15), ('e', 0.15), ('b', 0.15), ('d', 0.15), ('f', 0.15)]
>>> ranks.collect()[C[C[C[C       ranks = contributions.reduceByKey(lambda x, y: x+y).mapValues(lambda x: 0.85 * x +  0.15)[A[C[C[C[C[Ccontributions = links.join(ranks).flatMap(lambda x: nodecontributions(x[1][0], x[1][1]))[Afor i in range(1):[K
[K[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cranks = links.distinct().map(lambda x:(x[0],1/6))[C[C[C[C[C[C[C[C[C.collect()[K = links.distinct().map(lambda x:(x[0],1/6))[C[C[C[C[C[C[C[C[C.collect()[K[C[C[C[C       ranks = contributions.reduceByKey(lambda x, y: x+y).mapValues(lambda x: 0.85 * x +  0.15)[A[C[C[C[C[Ccontributions = links.join(ranks).flatMap(lambda x: nodecontributions(x[1][0], x[1][1]))[Afor i in range(1):[K
[K[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C            yield(node,rank*1.0/number)[C[C[C[C[C[C[C[C[17Pfor node in nodes:[C[C[C[C[C[C[C[Cnumber = len(nodes)[C[C[C[Cdef nodecontributions(nodes,rank):[C[C[C[C[12P    for node in nodes:[C[C[C[C[C[C[C[Cnumber = len(nodes)[C[C[C[C[C[C[C[C        yield(node,rank*1.0/number)def nodecontributions(nodes,rank):[C[C[C[C[C[C[C[Cfor node in nodes:[K[C[C[C[C[C[C[C[Cnumber = len(nodes)[C[C[C[Cdef nodecontributions(nodes,rank):[C[C[C[C[19Pranks.collect() = links.distinct().map(lambda x:(x[0],1))
>>> ranks.collect()
[('e', 1), ('c', 1), ('a', 1), ('d', 1), ('f', 1)]
>>> ranks.collect() = links.distinct().map(lambda x:(x[0],1))[C[C[C[C[C[C[C[C[C.collect()[K[C[C[C[C       ranks = contributions.reduceByKey(lambda x, y: x+y).mapValues(lambda x: 0.85 * x +  0.15)[A[C[C[C[C[Ccontributions = links.join(ranks).flatMap(lambda x: nodecontributions(x[1][0], x[1][1]))[Afor i in range(1):[K
[K[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cranks = links.distinct().map(lambda x:(x[0],1/6))[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[Kfor i in range(1):
...        contributions = links.join(ranks).flatMap(lambda x: nodecontributions(x[1][0], x[1 ][1]))
...        ranks = contributions.reduceByKey(lambda x, y: x+y).mapValues(lambda x: 0.85 * x +  0.15)
... 
>>> ranks.collect()
[('a', 1.0), ('c', 0.43333333333333335), ('e', 0.8583333333333333), ('b', 0.8583333333333333), ('d', 0.575), ('f', 1.4249999999999998)]
>>> for i in range(10):
...        contributions = links.join(ranks).flatMap(lambda x: nodecontributions(x[1][0], x[1 ][1]))
...        ranks = contributions.reduceByKey(lambda x, y: x+y).mapValues(lambda x: 0.85 * x +  0.15)
... 
>>>        ranks = contributions.reduceByKey(lambda x, y: x+y).mapValues(lambda x: 0.85 * x +  0.15)[A[C[C[C[C[Ccontributions = links.join(ranks).flatMap(lambda x: nodecontributions(x[1][0], x[1][1]))[A[C[C[C[C[Cranks = contributions.reduceByKey(lambda x, y: x+y).mapValues(lambda x: 0.85 * x + 0.15)[A[K
[K[A[C[C[C[C       ranks = contributions.reduceByKey(lambda x, y: x+y).mapValues(lambda x: 0.85 * x +  0.15)[A[C[C[C[C[Ccontributions = links.join(ranks).flatMap(lambda x: nodecontributions(x[1][0], x[1][1]))[Afor i in range(10):[K
[K[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[4Pranks.collect()
[('d', 0.3714593425217558), ('c', 0.3589347772485886), ('b', 0.5193709366358609), ('f', 0.6776754563896419), ('a', 0.7408487047420999), ('e', 0.5193709366358609)]
>>> for i in range(20):
...        contributions = links.join(ranks).flatMap(lambda x: nodecontributions(x[1][0], x[1 ][1]))
...        ranks = contributions.reduceByKey(lambda x, y: x+y).mapValues(lambda x: 0.85 * x +  0.15)
... 
>>>        ranks = contributions.reduceByKey(lambda x, y: x+y).mapValues(lambda x: 0.85 * x +  0.15)[A[C[C[C[C[Ccontributions = links.join(ranks).flatMap(lambda x: nodecontributions(x[1][0], x[1][1]))[Afor i in range(20):[K
[K[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[4Pranks.collect()
[Stage 81:============================================>           (11 + 1) / 14][Stage 83:====================================================>   (14 + 1) / 15][Stage 87:====================================================>   (16 + 1) / 17][Stage 89:=====================================>                  (12 + 1) / 18][Stage 89:=================================================>      (16 + 1) / 18][Stage 91:=========================================>              (14 + 1) / 19][Stage 91:==================================================>     (17 + 1) / 19][Stage 95:========================================>               (15 + 1) / 21][Stage 97:======================================>                 (15 + 1) / 22][Stage 97:================================================>       (19 + 1) / 22][Stage 99:==========================>                             (11 + 1) / 23][Stage 99:======================================>                 (16 + 1) / 23][Stage 99:================================================>       (20 + 1) / 23][Stage 100:=============================================>         (19 + 1) / 23][Stage 101:=========================================>             (18 + 1) / 24][Stage 103:============================================>          (20 + 1) / 25][Stage 105:===============================>                       (15 + 1) / 26][Stage 105:==========================================>            (20 + 1) / 26][Stage 105:==================================================>    (24 + 1) / 26][Stage 106:==========================================>            (20 + 1) / 26][Stage 107:==============================>                        (15 + 1) / 27][Stage 107:========================================>              (20 + 1) / 27][Stage 107:================================================>      (24 + 1) / 27][Stage 108:====================================>                  (18 + 1) / 27][Stage 109:===========================================>           (22 + 1) / 28][Stage 110:=================================================>     (25 + 1) / 28][Stage 111:==============================>                        (16 + 1) / 29][Stage 111:===============================================>       (25 + 1) / 29][Stage 112:=====================================================> (28 + 1) / 29][Stage 113:=========================>                             (14 + 1) / 30][Stage 113:=================================>                     (18 + 1) / 30][Stage 113:==========================================>            (23 + 1) / 30][Stage 113:=================================================>     (27 + 1) / 30][Stage 114:==========================================>            (23 + 1) / 30][Stage 115:========================>                              (14 + 1) / 31][Stage 115:===================================>                   (20 + 1) / 31][Stage 115:==========================================>            (24 + 1) / 31][Stage 115:===================================================>   (29 + 1) / 31][Stage 116:=====================================>                 (21 + 1) / 31][Stage 116:=================================================>     (28 + 1) / 31][Stage 117:==================================>                    (20 + 1) / 32][Stage 117:==============================================>        (27 + 2) / 32][Stage 118:=================================================>     (29 + 1) / 32][Stage 119:=========================================>             (24 + 1) / 32]                                                                                [('a', 0.7162094994737463), ('c', 0.352927682419491), ('b', 0.5085340974210001), ('e', 0.5085340974210001), ('d', 0.3661296149571689), ('f', 0.6661221980892056)]
>>> for i in range(21):
...        contributions = links.join(ranks).flatMap(lambda x: nodecontributions(x[1][0], x[1 ][1]))
...        ranks = contributions.reduceByKey(lambda x, y: x+y).mapValues(lambda x: 0.85 * x +  0.15)
... 
>>>        ranks = contributions.reduceByKey(lambda x, y: x+y).mapValues(lambda x: 0.85 * x +  0.15)[A[C[C[C[C[Ccontributions = links.join(ranks).flatMap(lambda x: nodecontributions(x[1][0], x[1][1]))[Afor i in range(21):[K
[K[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[4Pranks.collect()
[Stage 184:==============================>                        (18 + 1) / 33][Stage 184:========================================>              (24 + 1) / 33][Stage 184:==================================================>    (30 + 1) / 33][Stage 185:====================================>                  (22 + 1) / 33][Stage 185:==================================================>    (30 + 1) / 33][Stage 186:=====================>                                 (13 + 1) / 34][Stage 186:===========================>                           (17 + 1) / 34][Stage 186:===================================>                   (22 + 1) / 34][Stage 186:=============================================>         (28 + 1) / 34][Stage 186:===================================================>   (32 + 1) / 34][Stage 187:=====================================>                 (23 + 1) / 34][Stage 187:==================================================>    (31 + 1) / 34][Stage 188:====================>                                  (13 + 1) / 35][Stage 188:==========================>                            (17 + 1) / 35][Stage 188:==================================>                    (22 + 1) / 35][Stage 188:=======================================>               (25 + 1) / 35][Stage 188:=============================================>         (29 + 1) / 35][Stage 188:=====================================================> (34 + 1) / 35][Stage 189:====================================>                  (23 + 1) / 35][Stage 189:===============================================>       (30 + 1) / 35][Stage 190:========================>                              (16 + 1) / 36][Stage 190:====================================>                  (24 + 1) / 36][Stage 190:===============================================>       (31 + 1) / 36][Stage 191:============================================>          (29 + 1) / 36][Stage 191:=====================================================> (35 + 1) / 36][Stage 192:===============================>                       (21 + 1) / 37][Stage 192:============================================>          (30 + 1) / 37][Stage 192:=====================================================> (36 + 1) / 37][Stage 193:=========================================>             (28 + 1) / 37][Stage 193:====================================================>  (35 + 1) / 37][Stage 194:====================>                                  (14 + 1) / 38][Stage 194:=======================>                               (16 + 1) / 38][Stage 194:========================>                              (17 + 1) / 38][Stage 194:========================>                              (17 + 2) / 38][Stage 194:============================>                          (20 + 1) / 38][Stage 194:==============================>                        (21 + 2) / 38][Stage 194:==================================>                    (24 + 1) / 38][Stage 194:=======================================>               (27 + 1) / 38][Stage 194:============================================>          (31 + 1) / 38][Stage 194:==================================================>    (35 + 1) / 38][Stage 195:===========================================>           (30 + 1) / 38][Stage 195:=====================================================> (37 + 1) / 38][Stage 196:===================>                                   (14 + 1) / 39][Stage 196:============================>                          (20 + 1) / 39][Stage 196:===================================>                   (25 + 1) / 39][Stage 196:===========================================>           (31 + 1) / 39][Stage 196:=================================================>     (35 + 1) / 39][Stage 197:======================================>                (27 + 1) / 39][Stage 197:===============================================>       (34 + 1) / 39][Stage 198:========================>                              (18 + 1) / 40][Stage 198:===================================>                   (26 + 1) / 40][Stage 198:=========================================>             (30 + 1) / 40][Stage 198:====================================================>  (38 + 1) / 40][Stage 199:===================================>                   (26 + 1) / 40][Stage 199:==============================================>        (34 + 2) / 40][Stage 200:========================>                              (18 + 1) / 41][Stage 200:==================================>                    (26 + 1) / 41][Stage 200:============================================>          (33 + 1) / 41][Stage 200:====================================================>  (39 + 1) / 41][Stage 201:============================>                          (21 + 1) / 41][Stage 201:=========================================>             (31 + 1) / 41][Stage 201:====================================================>  (39 + 1) / 41][Stage 202:=================>                                     (13 + 1) / 42][Stage 202:======================>                                (17 + 1) / 42][Stage 202:==============================>                        (23 + 1) / 42][Stage 202:====================================>                  (28 + 1) / 42][Stage 202:=========================================>             (32 + 1) / 42][Stage 202:================================================>      (37 + 1) / 42][Stage 202:=====================================================> (41 + 1) / 42][Stage 203:===================================>                   (27 + 1) / 42][Stage 203:=============================================>         (35 + 1) / 42][Stage 204:====================>                                  (16 + 1) / 43][Stage 204:==========================>                            (21 + 1) / 43][Stage 204:=================================>                     (26 + 1) / 43][Stage 204:=======================================>               (31 + 1) / 43][Stage 204:============================================>          (35 + 1) / 43][Stage 204:================================================>      (38 + 1) / 43][Stage 205:=================================>                     (26 + 1) / 43][Stage 205:===============================================>       (37 + 1) / 43][Stage 206:================================>                      (26 + 1) / 44][Stage 206:=========================================>             (33 + 1) / 44][Stage 206:===================================================>   (41 + 1) / 44][Stage 207:==========================>                            (21 + 1) / 44][Stage 207:========================================>              (32 + 1) / 44][Stage 207:================================================>      (39 + 1) / 44][Stage 208:=======================>                               (19 + 1) / 45][Stage 208:=================================>                     (27 + 1) / 45][Stage 208:=========================================>             (34 + 1) / 45][Stage 208:==================================================>    (41 + 1) / 45][Stage 209:========================>                              (20 + 1) / 45][Stage 209:====================================>                  (30 + 1) / 45][Stage 209:==============================================>        (38 + 1) / 45][Stage 210:===================>                                   (16 + 1) / 46][Stage 210:==========================>                            (22 + 1) / 46][Stage 210:===============================>                       (26 + 1) / 46][Stage 210:======================================>                (32 + 1) / 46][Stage 210:============================================>          (37 + 1) / 46][Stage 210:==================================================>    (42 + 1) / 46][Stage 211:===============================>                       (26 + 1) / 46][Stage 211:============================================>          (37 + 1) / 46][Stage 211:====================================================>  (44 + 1) / 46][Stage 212:================>                                      (14 + 1) / 47][Stage 212:======================>                                (19 + 1) / 47][Stage 212:============================>                          (24 + 1) / 47][Stage 212:=================================>                     (29 + 1) / 47][Stage 212:=======================================>               (34 + 1) / 47][Stage 212:=============================================>         (39 + 1) / 47][Stage 212:==================================================>    (43 + 1) / 47][Stage 213:=================================>                     (29 + 1) / 47][Stage 213:==========================================>            (36 + 1) / 47][Stage 213:=================================================>     (42 + 1) / 47][Stage 214:========================>                              (21 + 1) / 48][Stage 214:================================>                      (28 + 1) / 48][Stage 214:=========================================>             (36 + 1) / 48][Stage 214:===================================================>   (45 + 1) / 48][Stage 215:=====================>                                 (19 + 1) / 48][Stage 215:==============================>                        (27 + 1) / 48][Stage 215:=========================================>             (36 + 1) / 48][Stage 215:===================================================>   (45 + 1) / 48][Stage 216:=======================>                               (21 + 1) / 49][Stage 216:=================================>                     (30 + 1) / 49][Stage 216:=========================================>             (37 + 1) / 49][Stage 216:==================================================>    (45 + 1) / 49][Stage 217:==================================>                    (31 + 1) / 49][Stage 217:==============================================>        (41 + 1) / 49][Stage 217:=====================================================> (48 + 1) / 49][Stage 218:===============>                                       (14 + 1) / 50][Stage 218:====================>                                  (19 + 1) / 50][Stage 218:===========================>                           (25 + 1) / 50][Stage 218:===============================>                       (29 + 1) / 50][Stage 218:======================================>                (35 + 1) / 50][Stage 218:============================================>          (40 + 1) / 50][Stage 218:================================================>      (44 + 1) / 50][Stage 218:=====================================================> (49 + 1) / 50][Stage 219:==========================>                            (24 + 1) / 50][Stage 219:======================================>                (35 + 1) / 50][Stage 219:===============================================>       (43 + 1) / 50][Stage 220:=================>                                     (16 + 1) / 51][Stage 220:=====================>                                 (20 + 1) / 51][Stage 220:============================>                          (26 + 1) / 51][Stage 220:=================================>                     (31 + 1) / 51][Stage 220:======================================>                (36 + 1) / 51][Stage 220:============================================>          (41 + 1) / 51][Stage 220:===============================================>       (44 + 1) / 51][Stage 220:=====================================================> (50 + 1) / 51][Stage 221:========================>                              (23 + 1) / 51][Stage 221:===================================>                   (33 + 1) / 51][Stage 221:============================================>          (41 + 1) / 51][Stage 222:=======================>                               (22 + 1) / 52][Stage 222:===============================>                       (30 + 1) / 52][Stage 222:========================================>              (38 + 1) / 52][Stage 222:===============================================>       (45 + 1) / 52][Stage 223:==============================>                        (29 + 1) / 52][Stage 223:=========================================>             (39 + 1) / 52][Stage 223:=================================================>     (47 + 1) / 52][Stage 224:===================>                                   (19 + 1) / 53][Stage 224:============================>                          (27 + 1) / 53][Stage 224:=====================================>                 (36 + 1) / 53][Stage 224:===========================================>           (42 + 1) / 53][Stage 224:===================================================>   (50 + 1) / 53][Stage 225:=====================>                                 (21 + 1) / 53][Stage 225:=================================>                     (32 + 1) / 53][Stage 225:==========================================>            (41 + 1) / 53][Stage 225:====================================================>  (51 + 1) / 53][Stage 226:============================>                          (27 + 1) / 53][Stage 226:====================================>                  (35 + 1) / 53][Stage 226:===============================================>       (46 + 1) / 53]                                                                                [('b', 0.5085217204482668), ('d', 0.36612173306065066), ('a', 0.7161881679466531), ('f', 0.6661037209107186), ('c', 0.35291998276983405), ('e', 0.5085217204482668)]
>>> for i in range(30):
...        contributions = links.join(ranks).flatMap(lambda x: nodecontributions(x[1][0], x[1 ][1]))
...        ranks = contributions.reduceByKey(lambda x, y: x+y).mapValues(lambda x: 0.85 * x +  0.15)
... 
>>> rans[Kks.collect()
[Stage 333:============>                                          (12 + 1) / 54][Stage 333:=================>                                     (17 + 1) / 54][Stage 333:=====================>                                 (21 + 1) / 54][Stage 333:===========================>                           (27 + 1) / 54][Stage 333:================================>                      (32 + 1) / 54][Stage 333:======================================>                (38 + 1) / 54][Stage 333:==========================================>            (42 + 1) / 54][Stage 333:===============================================>       (47 + 1) / 54][Stage 333:=====================================================> (53 + 1) / 54][Stage 334:=======================>                               (23 + 1) / 54][Stage 334:==================================>                    (34 + 1) / 54][Stage 334:===========================================>           (43 + 1) / 54][Stage 334:====================================================>  (52 + 1) / 54][Stage 335:=============>                                         (13 + 1) / 55][Stage 335:==================>                                    (18 + 1) / 55][Stage 335:=======================>                               (23 + 1) / 55][Stage 335:=============================>                         (29 + 1) / 55][Stage 335:=================================>                     (33 + 1) / 55][Stage 335:======================================>                (38 + 1) / 55][Stage 335:============================================>          (44 + 1) / 55][Stage 335:================================================>      (48 + 1) / 55][Stage 335:=====================================================> (53 + 1) / 55][Stage 336:=======================>                               (23 + 1) / 55][Stage 336:================================>                      (32 + 1) / 55][Stage 336:=========================================>             (41 + 1) / 55][Stage 336:==================================================>    (50 + 1) / 55][Stage 337:================>                                      (17 + 1) / 56][Stage 337:=====================>                                 (22 + 1) / 56][Stage 337:==========================>                            (27 + 1) / 56][Stage 337:===============================>                       (32 + 1) / 56][Stage 337:====================================>                  (37 + 1) / 56][Stage 337:=========================================>             (42 + 1) / 56][Stage 337:==============================================>        (47 + 1) / 56][Stage 337:===================================================>   (52 + 1) / 56][Stage 338:============================>                          (29 + 1) / 56][Stage 338:=====================================>                 (38 + 1) / 56][Stage 338:===============================================>       (48 + 1) / 56][Stage 338:======================================================>(55 + 1) / 56][Stage 339:=============>                                         (14 + 1) / 57][Stage 339:==================>                                    (19 + 1) / 57][Stage 339:======================>                                (23 + 1) / 57][Stage 339:==========================>                            (27 + 1) / 57][Stage 339:==============================>                        (32 + 1) / 57][Stage 339:===================================>                   (37 + 1) / 57][Stage 339:========================================>              (42 + 1) / 57][Stage 339:=============================================>         (47 + 1) / 57][Stage 339:=================================================>     (51 + 1) / 57][Stage 339:======================================================>(56 + 1) / 57][Stage 340:========================>                              (25 + 1) / 57][Stage 340:================================>                      (34 + 1) / 57][Stage 340:=========================================>             (43 + 1) / 57][Stage 340:==================================================>    (52 + 1) / 57][Stage 341:==========>                                            (11 + 1) / 58][Stage 341:================>                                      (17 + 1) / 58][Stage 341:===================>                                   (21 + 1) / 58][Stage 341:=========================>                             (27 + 1) / 58][Stage 341:==============================>                        (32 + 1) / 58][Stage 341:==================================>                    (36 + 1) / 58][Stage 341:=======================================>               (42 + 1) / 58][Stage 341:============================================>          (47 + 1) / 58][Stage 341:=================================================>     (52 + 1) / 58][Stage 341:======================================================>(57 + 1) / 58][Stage 342:========================>                              (26 + 1) / 58][Stage 342:=================================>                     (35 + 1) / 58][Stage 342:=========================================>             (44 + 1) / 58][Stage 342:==================================================>    (53 + 1) / 58][Stage 343:===============>                                       (17 + 1) / 59][Stage 343:====================>                                  (22 + 1) / 59][Stage 343:=========================>                             (27 + 1) / 59][Stage 343:=============================>                         (32 + 1) / 59][Stage 343:===================================>                   (38 + 1) / 59][Stage 343:=======================================>               (42 + 1) / 59][Stage 343:===========================================>           (47 + 1) / 59][Stage 343:=================================================>     (53 + 1) / 59][Stage 343:====================================================>  (56 + 1) / 59][Stage 344:===================>                                   (21 + 1) / 59][Stage 344:===========================>                           (29 + 1) / 59][Stage 344:===================================>                   (38 + 1) / 59][Stage 344:============================================>          (48 + 1) / 59][Stage 344:====================================================>  (56 + 2) / 59][Stage 345:===========>                                           (12 + 2) / 60][Stage 345:================>                                      (18 + 1) / 60][Stage 345:=====================>                                 (23 + 1) / 60][Stage 345:==========================>                            (29 + 1) / 60][Stage 345:==============================>                        (33 + 1) / 60][Stage 345:==================================>                    (38 + 1) / 60][Stage 345:=======================================>               (43 + 1) / 60][Stage 345:============================================>          (48 + 1) / 60][Stage 345:================================================>      (53 + 1) / 60][Stage 345:=====================================================> (58 + 1) / 60][Stage 346:======================>                                (25 + 1) / 60][Stage 346:===============================>                       (34 + 1) / 60][Stage 346:=======================================>               (43 + 1) / 60][Stage 346:===============================================>       (52 + 1) / 60][Stage 347:============>                                          (14 + 1) / 61][Stage 347:==================>                                    (20 + 1) / 61][Stage 347:=====================>                                 (24 + 1) / 61][Stage 347:==========================>                            (29 + 1) / 61][Stage 347:===============================>                       (35 + 1) / 61][Stage 347:===================================>                   (39 + 1) / 61][Stage 347:========================================>              (45 + 1) / 61][Stage 347:=============================================>         (50 + 1) / 61][Stage 347:=================================================>     (55 + 1) / 61][Stage 347:=====================================================> (59 + 1) / 61][Stage 348:=======================>                               (26 + 1) / 61][Stage 348:==============================>                        (34 + 2) / 61][Stage 348:=======================================>               (44 + 1) / 61][Stage 348:===============================================>       (53 + 1) / 61][Stage 349:=============>                                         (15 + 1) / 62][Stage 349:=================>                                     (20 + 1) / 62][Stage 349:====================>                                  (23 + 1) / 62][Stage 349:========================>                              (28 + 2) / 62][Stage 349:=============================>                         (33 + 1) / 62][Stage 349:=================================>                     (38 + 1) / 62][Stage 349:=======================================>               (44 + 1) / 62][Stage 349:==========================================>            (48 + 1) / 62][Stage 349:===============================================>       (54 + 1) / 62][Stage 349:====================================================>  (59 + 1) / 62][Stage 350:==================>                                    (21 + 1) / 62][Stage 350:==========================>                            (30 + 1) / 62][Stage 350:===================================>                   (40 + 1) / 62][Stage 350:============================================>          (50 + 1) / 62][Stage 350:====================================================>  (59 + 1) / 62][Stage 351:===========>                                           (13 + 1) / 63][Stage 351:===============>                                       (18 + 1) / 63][Stage 351:====================>                                  (23 + 1) / 63][Stage 351:=========================>                             (29 + 1) / 63][Stage 351:============================>                          (33 + 1) / 63][Stage 351:=================================>                     (38 + 1) / 63][Stage 351:======================================>                (44 + 1) / 63][Stage 351:=========================================>             (48 + 1) / 63][Stage 351:===============================================>       (54 + 1) / 63][Stage 351:===================================================>   (59 + 1) / 63][Stage 352:========================>                              (28 + 1) / 63][Stage 352:================================>                      (37 + 1) / 63][Stage 352:========================================>              (46 + 1) / 63][Stage 352:================================================>      (55 + 1) / 63][Stage 353:============>                                          (15 + 1) / 64][Stage 353:=================>                                     (20 + 1) / 64][Stage 353:======================>                                (26 + 1) / 64][Stage 353:=========================>                             (30 + 1) / 64][Stage 353:==============================>                        (36 + 1) / 64][Stage 353:===================================>                   (41 + 1) / 64][Stage 353:======================================>                (45 + 1) / 64][Stage 353:===========================================>           (51 + 1) / 64][Stage 353:================================================>      (56 + 1) / 64][Stage 353:===================================================>   (60 + 1) / 64][Stage 354:======================>                                (26 + 1) / 64][Stage 354:==============================>                        (35 + 1) / 64][Stage 354:======================================>                (45 + 1) / 64][Stage 354:==============================================>        (54 + 1) / 64][Stage 354:======================================================>(63 + 1) / 64][Stage 355:===========>                                           (14 + 1) / 65][Stage 355:================>                                      (20 + 1) / 65][Stage 355:====================>                                  (24 + 1) / 65][Stage 355:=========================>                             (30 + 1) / 65][Stage 355:=============================>                         (35 + 1) / 65][Stage 355:=================================>                     (39 + 1) / 65][Stage 355:======================================>                (45 + 1) / 65][Stage 355:==========================================>            (50 + 1) / 65][Stage 355:==============================================>        (55 + 1) / 65][Stage 355:==================================================>    (60 + 1) / 65][Stage 356:====================>                                  (24 + 1) / 65][Stage 356:===========================>                           (33 + 1) / 65][Stage 356:==================================>                    (41 + 1) / 65][Stage 356:=========================================>             (49 + 1) / 65][Stage 356:================================================>      (57 + 1) / 65][Stage 356:======================================================>(64 + 1) / 65][Stage 357:==========>                                            (13 + 1) / 66][Stage 357:===============>                                       (18 + 1) / 66][Stage 357:==================>                                    (22 + 1) / 66][Stage 357:======================>                                (27 + 1) / 66][Stage 357:==========================>                            (32 + 1) / 66][Stage 357:==============================>                        (36 + 1) / 66][Stage 357:==================================>                    (41 + 1) / 66][Stage 357:=======================================>               (47 + 1) / 66][Stage 357:==========================================>            (51 + 1) / 66][Stage 357:==============================================>        (56 + 1) / 66][Stage 357:==================================================>    (60 + 1) / 66][Stage 357:======================================================>(65 + 1) / 66][Stage 358:====================>                                  (25 + 1) / 66][Stage 358:============================>                          (34 + 1) / 66][Stage 358:===================================>                   (43 + 1) / 66][Stage 358:============================================>          (53 + 1) / 66][Stage 358:==================================================>    (61 + 1) / 66][Stage 359:=========>                                             (12 + 1) / 67][Stage 359:==============>                                        (18 + 1) / 67][Stage 359:==================>                                    (23 + 1) / 67][Stage 359:======================>                                (27 + 1) / 67][Stage 359:===========================>                           (33 + 1) / 67][Stage 359:===============================>                       (38 + 1) / 67][Stage 359:=================================>                     (41 + 1) / 67][Stage 359:======================================>                (47 + 1) / 67][Stage 359:=========================================>             (51 + 1) / 67][Stage 359:=============================================>         (56 + 1) / 67][Stage 359:=================================================>     (60 + 1) / 67][Stage 359:=====================================================> (65 + 1) / 67][Stage 360:==================>                                    (23 + 1) / 67][Stage 360:==========================>                            (32 + 1) / 67][Stage 360:=================================>                     (41 + 1) / 67][Stage 360:=========================================>             (51 + 1) / 67][Stage 360:==================================================>    (61 + 1) / 67][Stage 361:=============>                                         (17 + 1) / 68][Stage 361:================>                                      (21 + 1) / 68][Stage 361:=====================>                                 (26 + 1) / 68][Stage 361:=========================>                             (32 + 1) / 68][Stage 361:=============================>                         (36 + 1) / 68][Stage 361:=================================>                     (42 + 1) / 68][Stage 361:======================================>                (47 + 1) / 68][Stage 361:==========================================>            (52 + 1) / 68][Stage 361:==============================================>        (57 + 1) / 68][Stage 361:==================================================>    (62 + 1) / 68][Stage 361:======================================================>(67 + 1) / 68][Stage 362:====================>                                  (25 + 1) / 68][Stage 362:===========================>                           (34 + 1) / 68][Stage 362:==================================>                    (43 + 1) / 68][Stage 362:=========================================>             (51 + 1) / 68][Stage 362:=================================================>     (61 + 1) / 68][Stage 363:============>                                          (16 + 1) / 69][Stage 363:================>                                      (21 + 1) / 69][Stage 363:====================>                                  (26 + 1) / 69][Stage 363:=========================>                             (32 + 1) / 69][Stage 363:============================>                          (36 + 1) / 69][Stage 363:================================>                      (41 + 1) / 69][Stage 363:=====================================>                 (47 + 1) / 69][Stage 363:========================================>              (51 + 1) / 69][Stage 363:=============================================>         (57 + 1) / 69][Stage 363:=================================================>     (62 + 1) / 69][Stage 363:====================================================>  (66 + 1) / 69][Stage 364:======================>                                (28 + 1) / 69][Stage 364:=============================>                         (37 + 1) / 69][Stage 364:====================================>                  (46 + 1) / 69][Stage 364:=============================================>         (57 + 1) / 69][Stage 364:===================================================>   (65 + 1) / 69][Stage 365:=========>                                             (12 + 1) / 70][Stage 365:==============>                                        (18 + 1) / 70][Stage 365:==================>                                    (23 + 1) / 70][Stage 365:=====================>                                 (27 + 1) / 70][Stage 365:=========================>                             (32 + 1) / 70][Stage 365:=============================>                         (37 + 1) / 70][Stage 365:=================================>                     (42 + 1) / 70][Stage 365:====================================>                  (47 + 1) / 70][Stage 365:========================================>              (52 + 1) / 70][Stage 365:============================================>          (57 + 1) / 70][Stage 365:================================================>      (62 + 1) / 70][Stage 365:====================================================>  (67 + 1) / 70][Stage 366:=========================>                             (32 + 1) / 70][Stage 366:================================>                      (41 + 1) / 70][Stage 366:=======================================>               (50 + 1) / 70][Stage 366:==============================================>        (59 + 1) / 70][Stage 366:=====================================================> (68 + 1) / 70][Stage 367:==========>                                            (14 + 1) / 71][Stage 367:=============>                                         (18 + 1) / 71][Stage 367:=================>                                     (23 + 1) / 71][Stage 367:======================>                                (29 + 1) / 71][Stage 367:=========================>                             (33 + 1) / 71][Stage 367:==============================>                        (39 + 1) / 71][Stage 367:==================================>                    (44 + 1) / 71][Stage 367:=====================================>                 (48 + 1) / 71][Stage 367:=========================================>             (54 + 1) / 71][Stage 367:=============================================>         (59 + 1) / 71][Stage 367:================================================>      (63 + 1) / 71][Stage 367:=====================================================> (69 + 1) / 71][Stage 368:==================>                                    (24 + 1) / 71][Stage 368:=========================>                             (33 + 1) / 71][Stage 368:================================>                      (42 + 1) / 71][Stage 368:======================================>                (50 + 1) / 71][Stage 368:=============================================>         (59 + 1) / 71][Stage 368:====================================================>  (68 + 1) / 71][Stage 369:========>                                              (11 + 1) / 72][Stage 369:===========>                                           (15 + 1) / 72][Stage 369:===============>                                       (20 + 1) / 72][Stage 369:==================>                                    (24 + 1) / 72][Stage 369:=====================>                                 (28 + 1) / 72][Stage 369:========================>                              (32 + 1) / 72][Stage 369:===========================>                           (36 + 1) / 72][Stage 369:================================>                      (42 + 1) / 72][Stage 369:===================================>                   (47 + 1) / 72][Stage 369:======================================>                (51 + 1) / 72][Stage 369:===========================================>           (57 + 1) / 72][Stage 369:===============================================>       (62 + 1) / 72][Stage 369:==================================================>    (66 + 1) / 72][Stage 369:======================================================>(71 + 1) / 72][Stage 370:=================>                                     (23 + 1) / 72][Stage 370:=========================>                             (33 + 1) / 72][Stage 370:================================>                      (42 + 1) / 72][Stage 370:=======================================>               (52 + 1) / 72][Stage 370:=============================================>         (60 + 1) / 72][Stage 370:===================================================>   (67 + 1) / 72][Stage 371:===========>                                           (15 + 1) / 73][Stage 371:===============>                                       (20 + 1) / 73][Stage 371:==================>                                    (24 + 1) / 73][Stage 371:=====================>                                 (29 + 1) / 73][Stage 371:==========================>                            (35 + 1) / 73][Stage 371:=============================>                         (39 + 1) / 73][Stage 371:=================================>                     (44 + 1) / 73][Stage 371:====================================>                  (49 + 1) / 73][Stage 371:========================================>              (54 + 1) / 73][Stage 371:============================================>          (59 + 1) / 73][Stage 371:================================================>      (65 + 1) / 73][Stage 371:===================================================>   (69 + 1) / 73][Stage 372:====================>                                  (27 + 1) / 73][Stage 372:===========================>                           (36 + 1) / 73][Stage 372:=================================>                     (45 + 1) / 73][Stage 372:========================================>              (54 + 1) / 73][Stage 372:==============================================>        (62 + 1) / 73][Stage 372:=====================================================> (71 + 1) / 73][Stage 373:==========>                                            (14 + 1) / 74][Stage 373:==============>                                        (19 + 1) / 74][Stage 373:=================>                                     (24 + 1) / 74][Stage 373:=====================>                                 (29 + 1) / 74][Stage 373:==========================>                            (35 + 1) / 74][Stage 373:============================>                          (39 + 1) / 74][Stage 373:=================================>                     (45 + 1) / 74][Stage 373:=====================================>                 (50 + 1) / 74][Stage 373:========================================>              (55 + 1) / 74][Stage 373:===========================================>           (58 + 1) / 74][Stage 373:==============================================>        (63 + 1) / 74][Stage 373:==================================================>    (68 + 1) / 74][Stage 373:=====================================================> (72 + 1) / 74][Stage 374:=================>                                     (24 + 1) / 74][Stage 374:========================>                              (33 + 1) / 74][Stage 374:===============================>                       (42 + 1) / 74][Stage 374:=====================================>                 (51 + 1) / 74][Stage 374:============================================>          (60 + 1) / 74][Stage 374:===================================================>   (69 + 1) / 74][Stage 375:============>                                          (17 + 1) / 75][Stage 375:================>                                      (22 + 1) / 75][Stage 375:===================>                                   (27 + 1) / 75][Stage 375:=======================>                               (32 + 1) / 75][Stage 375:===========================>                           (38 + 1) / 75][Stage 375:==============================>                        (42 + 1) / 75][Stage 375:===================================>                   (48 + 1) / 75][Stage 375:======================================>                (53 + 1) / 75][Stage 375:=========================================>             (57 + 1) / 75][Stage 375:==============================================>        (63 + 1) / 75][Stage 375:=================================================>     (68 + 1) / 75][Stage 375:====================================================>  (72 + 1) / 75][Stage 376:================>                                      (23 + 1) / 75][Stage 376:========================>                              (33 + 1) / 75][Stage 376:===============================>                       (43 + 1) / 75][Stage 376:======================================>                (52 + 1) / 75][Stage 376:============================================>          (61 + 1) / 75][Stage 376:===================================================>   (70 + 1) / 75][Stage 377:============>                                          (17 + 1) / 76][Stage 377:===============>                                       (21 + 1) / 76][Stage 377:===================>                                   (27 + 1) / 76][Stage 377:=======================>                               (32 + 1) / 76][Stage 377:==========================>                            (37 + 1) / 76][Stage 377:==============================>                        (42 + 1) / 76][Stage 377:==================================>                    (47 + 1) / 76][Stage 377:======================================>                (53 + 1) / 76][Stage 377:=========================================>             (57 + 1) / 76][Stage 377:=============================================>         (63 + 1) / 76][Stage 377:=================================================>     (68 + 1) / 76][Stage 377:====================================================>  (72 + 1) / 76][Stage 378:===================>                                   (27 + 1) / 76][Stage 378:=========================>                             (35 + 1) / 76][Stage 378:===============================>                       (44 + 1) / 76][Stage 378:======================================>                (53 + 2) / 76][Stage 378:=============================================>         (63 + 1) / 76][Stage 378:===================================================>   (71 + 1) / 76][Stage 379:============>                                          (17 + 1) / 77][Stage 379:===============>                                       (21 + 1) / 77][Stage 379:===================>                                   (27 + 1) / 77][Stage 379:======================>                                (32 + 1) / 77][Stage 379:==========================>                            (37 + 1) / 77][Stage 379:==============================>                        (42 + 1) / 77][Stage 379:=================================>                     (47 + 1) / 77][Stage 379:=====================================>                 (53 + 1) / 77][Stage 379:========================================>              (57 + 1) / 77][Stage 379:============================================>          (62 + 1) / 77][Stage 379:================================================>      (68 + 1) / 77][Stage 379:===================================================>   (72 + 1) / 77][Stage 380:====================>                                  (28 + 1) / 77][Stage 380:==========================>                            (37 + 1) / 77][Stage 380:=================================>                     (47 + 1) / 77][Stage 380:========================================>              (56 + 1) / 77][Stage 380:===============================================>       (66 + 1) / 77][Stage 380:====================================================>  (74 + 1) / 77][Stage 381:=========>                                             (13 + 1) / 78][Stage 381:============>                                          (18 + 1) / 78][Stage 381:================>                                      (23 + 1) / 78][Stage 381:====================>                                  (29 + 1) / 78][Stage 381:=======================>                               (33 + 1) / 78][Stage 381:===========================>                           (39 + 1) / 78][Stage 381:===============================>                       (44 + 1) / 78][Stage 381:=================================>                     (48 + 1) / 78][Stage 381:======================================>                (54 + 1) / 78][Stage 381:=========================================>             (59 + 1) / 78][Stage 381:=============================================>         (65 + 1) / 78][Stage 381:================================================>      (69 + 1) / 78][Stage 381:====================================================>  (74 + 1) / 78][Stage 382:=====================>                                 (31 + 1) / 78][Stage 382:============================>                          (40 + 1) / 78][Stage 382:==================================>                    (49 + 1) / 78][Stage 382:========================================>              (58 + 1) / 78][Stage 382:===============================================>       (67 + 1) / 78][Stage 382:=====================================================> (76 + 1) / 78][Stage 383:=========>                                             (14 + 1) / 79][Stage 383:============>                                          (18 + 1) / 79][Stage 383:================>                                      (24 + 1) / 79][Stage 383:====================>                                  (29 + 1) / 79][Stage 383:======================>                                (33 + 1) / 79][Stage 383:==========================>                            (38 + 1) / 79][Stage 383:=============================>                         (43 + 1) / 79][Stage 383:=================================>                     (48 + 1) / 79][Stage 383:====================================>                  (53 + 1) / 79][Stage 383:=========================================>             (59 + 1) / 79][Stage 383:===========================================>           (63 + 1) / 79][Stage 383:================================================>      (69 + 1) / 79][Stage 383:==================================================>    (72 + 1) / 79][Stage 383:=====================================================> (77 + 1) / 79][Stage 384:==================>                                    (26 + 1) / 79][Stage 384:========================>                              (35 + 1) / 79][Stage 384:=============================>                         (43 + 1) / 79][Stage 384:====================================>                  (52 + 1) / 79][Stage 384:===========================================>           (62 + 1) / 79][Stage 384:=================================================>     (71 + 1) / 79][Stage 385:==========>                                            (15 + 1) / 80][Stage 385:=============>                                         (20 + 1) / 80][Stage 385:================>                                      (24 + 1) / 80][Stage 385:====================>                                  (30 + 1) / 80][Stage 385:========================>                              (35 + 1) / 80][Stage 385:===========================>                           (40 + 1) / 80][Stage 385:==============================>                        (45 + 1) / 80][Stage 385:==================================>                    (50 + 1) / 80][Stage 385:======================================>                (56 + 1) / 80][Stage 385:=========================================>             (60 + 1) / 80][Stage 385:=============================================>         (66 + 1) / 80][Stage 385:================================================>      (71 + 1) / 80][Stage 385:===================================================>   (75 + 1) / 80][Stage 386:==================>                                    (27 + 1) / 80][Stage 386:========================>                              (36 + 1) / 80][Stage 386:==============================>                        (45 + 1) / 80][Stage 386:=====================================>                 (54 + 1) / 80][Stage 386:===========================================>           (63 + 1) / 80][Stage 386:=================================================>     (72 + 1) / 80][Stage 387:==========>                                            (16 + 1) / 81][Stage 387:==============>                                        (21 + 1) / 81][Stage 387:=================>                                     (26 + 1) / 81][Stage 387:=====================>                                 (32 + 1) / 81][Stage 387:========================>                              (36 + 1) / 81][Stage 387:===========================>                           (41 + 1) / 81][Stage 387:=============================>                         (44 + 1) / 81][Stage 387:=================================>                     (50 + 1) / 81][Stage 387:====================================>                  (54 + 1) / 81][Stage 387:========================================>              (59 + 1) / 81][Stage 387:==========================================>            (63 + 1) / 81][Stage 387:==============================================>        (68 + 1) / 81][Stage 387:================================================>      (72 + 1) / 81][Stage 387:====================================================>  (78 + 1) / 81][Stage 388:=====================>                                 (31 + 1) / 81][Stage 388:===========================>                           (40 + 1) / 81][Stage 388:=================================>                     (49 + 1) / 81][Stage 388:=======================================>               (58 + 1) / 81][Stage 388:=============================================>         (67 + 2) / 81][Stage 388:====================================================>  (78 + 1) / 81][Stage 389:========>                                              (12 + 1) / 82][Stage 389:============>                                          (18 + 1) / 82][Stage 389:===============>                                       (23 + 1) / 82][Stage 389:==================>                                    (28 + 1) / 82][Stage 389:======================>                                (33 + 1) / 82][Stage 389:=========================>                             (38 + 1) / 82][Stage 389:=============================>                         (44 + 1) / 82][Stage 389:================================>                      (48 + 1) / 82][Stage 389:====================================>                  (54 + 1) / 82][Stage 389:=======================================>               (59 + 1) / 82][Stage 389:==========================================>            (63 + 1) / 82][Stage 389:==============================================>        (69 + 1) / 82][Stage 389:=================================================>     (74 + 1) / 82][Stage 389:====================================================>  (78 + 1) / 82][Stage 390:=====================>                                 (32 + 1) / 82][Stage 390:===========================>                           (41 + 1) / 82][Stage 390:=================================>                     (50 + 1) / 82][Stage 390:=======================================>               (59 + 1) / 82][Stage 390:=============================================>         (68 + 1) / 82][Stage 390:===================================================>   (77 + 1) / 82][Stage 391:=======>                                               (12 + 1) / 83][Stage 391:===========>                                           (18 + 1) / 83][Stage 391:===============>                                       (23 + 1) / 83][Stage 391:=================>                                     (27 + 1) / 83][Stage 391:=====================>                                 (33 + 1) / 83][Stage 391:=========================>                             (38 + 1) / 83][Stage 391:============================>                          (43 + 1) / 83][Stage 391:===============================>                       (48 + 1) / 83][Stage 391:===================================>                   (53 + 1) / 83][Stage 391:=======================================>               (59 + 1) / 83][Stage 391:=========================================>             (63 + 1) / 83][Stage 391:=============================================>         (68 + 1) / 83][Stage 391:=================================================>     (74 + 1) / 83][Stage 391:===================================================>   (78 + 1) / 83][Stage 392:=================>                                     (27 + 2) / 83][Stage 392:=========================>                             (39 + 1) / 83][Stage 392:===============================>                       (48 + 1) / 83][Stage 392:=====================================>                 (57 + 1) / 83][Stage 392:===========================================>           (66 + 1) / 83][Stage 392:=================================================>     (75 + 1) / 83][Stage 393:====================>                                  (31 + 1) / 83][Stage 393:==========================>                            (40 + 1) / 83][Stage 393:================================>                      (49 + 1) / 83][Stage 393:======================================>                (58 + 1) / 83][Stage 393:=============================================>         (68 + 1) / 83][Stage 393:===================================================>   (78 + 1) / 83]                                                                                [('c', 0.35291997589520807), ('d', 0.36612172662768083), ('a', 0.7161881502181001), ('e', 0.5085217097120166), ('b', 0.5085217097120166), ('f', 0.6661037061387028)]
>>> 